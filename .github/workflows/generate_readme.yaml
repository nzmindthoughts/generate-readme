name: Generate README file
on:
  push:
    paths:
      - 'config/account_info.*.json'
      - '.github/workflows/generate_readme.yaml'
permissions:
      id-token: write
      contents: write
      pull-requests: write
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
jobs:
  GenerateReadMe:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Generate Dev README
        if: github.ref_name == 'dev'
        run: |
          git checkout -b readme-update-dev
          make readme ENVIRONMENT_NAME='dev'
      - name: Generate Test README
        if: github.ref_name == 'test'
        run: |
          git checkout -b readme-update-test
          make readme ENVIRONMENT_NAME='test'
      - name: Generate Staging README
        if: github.ref_name == 'staging'
        run: |
          git checkout -b readme-update-staging
          make readme ENVIRONMENT_NAME='staging'
      - name: Generate Prod README
        if: github.ref_name == 'main'
        run: |
          git config --global user.email "github-actions@example.com"
          git config --global user.name "GitHub README Action"
          git checkout -b readme-update-prod
          make readme ENVIRONMENT_NAME='prod'
          ls
          git add -f README.md
          git commit -m "Updating Prod README file"
          git push --set-upstream origin readme-update-prod
      - name: Look for existing open PR
        run: |
          pullreqnumber="$(gh pr status --json number,baseRefName,state -q '.currentBranch | select((.baseRefName == "main") and (.state == "OPEN")) | .number')"
          echo 'PULL_REQ_NUMBER='$pullreqnumber >> $GITHUB_ENV
      - name: Create PR
        id: create-pr
        if: env.PULL_REQ_NUMBER == ''
        run: |
          gh pr create --base main --head readme-update-prod --title 'README Update: Prod Update.'
  
  # Test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Test
  #       run: |
  #         make test
  # Deploy:
  #   needs: Test
  #   if: github.ref_name == 'dev' || github.ref_name == 'test' || github.ref_name == 'staging' || github.ref_name == 'main'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Deploy to Dev
  #       if: github.ref_name == 'dev'
  #       uses: ./.github/actions/deploy-cloudformation-templates
  #       with:
  #         account-number: ${{ secrets.DEV_ACCOUNT_NUMBER }}
  #         environment-name: 'dev'
  #     - name: Deploy to Test
  #       if: github.ref_name == 'test'
  #       uses: ./.github/actions/deploy-cloudformation-templates
  #       with:
  #         account-number: ${{ secrets.TEST_ACCOUNT_NUMBER }}
  #         environment-name: 'test'
  #     - name: Deploy to Staging
  #       if: github.ref_name == 'staging'
  #       uses: ./.github/actions/deploy-cloudformation-templates
  #       with:
  #         account-number: ${{ secrets.STAGING_ACCOUNT_NUMBER }}
  #         environment-name: 'staging'
  #     - name: Deploy to Prod
  #       if: github.ref_name == 'main'
  #       uses: ./.github/actions/deploy-cloudformation-templates
  #       with:
  #         account-number: ${{ secrets.PROD_ACCOUNT_NUMBER }}
  #         environment-name: 'prod'
  # PromoteCode:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         ref: ${{ github.event.inputs.source_branch }}
  #     - name: Look for existing open PR
  #       run: |
  #         pullreqnumber="$(gh pr status --json number,baseRefName,state -q '.currentBranch | select((.baseRefName == "${{ github.event.inputs.target_branch }}") and (.state == "OPEN")) | .number')"
  #         echo 'PULL_REQ_NUMBER='$pullreqnumber >> $GITHUB_ENV
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Create PR
  #       id: create-pr
  #       if: env.PULL_REQ_NUMBER == ''
  #       run: |
  #         gh pr create --base ${{ github.event.inputs.target_branch }} --head ${{ github.event.inputs.source_branch }} --title 'Promotion Pipeline: ${{ github.event.inputs.source_branch }} to ${{ github.event.inputs.target_branch }}'  --body "Promoting code from ${{ github.event.inputs.source_branch }} to ${{ github.event.inputs.target_branch }}. Pipeline initiated by ${{ github.actor }}"
  #         sleep 30s
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}